import TelegramBot from 'node-telegram-bot-api';
import telegramCalendar from 'telegram-bot-calendar-lite';
import { get_doctor_type_list, get_schedule_time, add_new_user, make_zapis, get_patient_id, get_zapis_week } from '../db/work_db.js';

const calendar = new telegramCalendar();
const buttons = calendar.generateCalendar();

let base_menu = null;
let doctor_menu = null;
let calendar_select = null;
let doctor_type = null;
let doctors_list = null;
let selected_doctor = null;
let time_list = null;
let time_selected = null;
let record_list = null;

function getCurrentWeekDates() {
    let today = new Date();
    let startOfWeek = new Date(today);
    let endOfWeek = new Date(today);

    startOfWeek.setDate(today.getDate() - today.getDay() + 1);
    endOfWeek.setDate(today.getDate() + (7 - today.getDay()));

    const weekDates = [];
    for (let date = startOfWeek; date <= endOfWeek; date.setDate(date.getDate() + 1)) {
        let year = date.getFullYear();
        let month = String(date.getMonth() + 1);
        let day = String(date.getDate()).padStart(2, '0');
        weekDates.push(`${year}-${month}-${day}`);
    }

    return weekDates;
}


function ways(bot){
    bot.onText(/\/start/, async msg => {
        try {
            if (base_menu) {
                await bot.deleteMessage(base_menu.chat.id, base_menu.message_id);
                base_menu = null;
            }
            await bot.sendMessage(msg.chat.id, `–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞!`);
            await add_new_user(msg.from.id);
            setTimeout(async () => {
                base_menu = await bot.sendMessage(msg.chat.id, `–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é`, {
                    reply_markup: {
                        keyboard: [
                            ['üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º –∫ –≤—Ä–∞—á—É','‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å']
                        ],
                        resize_keyboard : true
                    }
                })
            },2000);
        } catch(error) {
            console.log(error);
        }
    })
    
    bot.onText(/\/menu/, async msg => {
        try {
            if (base_menu) {
                await bot.deleteMessage(base_menu.chat.id, base_menu.message_id);
                base_menu = null;
            }
            setTimeout(async () => {
                base_menu = await bot.sendMessage(msg.chat.id, `–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é`, {
                    reply_markup: {
                        keyboard: [
                            ['üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º –∫ –≤—Ä–∞—á—É','‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å']
                        ],
                        resize_keyboard : true
                    }
                })
            },1000);
        } catch(error) {
            console.log(error);
        }
    })

    bot.onText(/\/info/, async msg => {
        try{
            if (base_menu) {
                await bot.deleteMessage(base_menu.chat.id, base_menu.message_id);
                base_menu = null;
            }
            let msgWait = await bot.sendMessage(msg.chat.id, `–ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...`);
            setTimeout(async () => {
                const latitudeOfRedSquare = 55.753700;
                const longitudeOfReadSquare = 37.621250;

                await bot.editMessageText("–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, —Ç–µ–ª: 8(800)-555-35-35", { chat_id: msgWait.chat.id, message_id: msgWait.message_id });
                await bot.sendLocation(msg.chat.id, latitudeOfRedSquare, longitudeOfReadSquare, {reply_to_message_id: msgWait.message_id})
                // await bot.sendMessage(msg.chat.id,"–ê–≤—Ç–æ—Ä—ã: –ê—Ä—Å–µ–Ω –ö–∞—Ä–∞–∫–µ—è–Ω, –ú–∞–∫—Å–∏–º  –û–≤—á–∏–Ω–Ω–∏–∫–æ–≤, –ú–∞—Ä–∏–Ω–∞ –ö–æ—Ä–æ–ª—ë–≤–∞");
            },4000);
        } catch(error){
            console.log(error);
        } 
    })

    bot.onText(/\/show_price/, async msg => {
        if (base_menu) {
            await bot.deleteMessage(base_menu.chat.id, base_menu.message_id);
            base_menu = null;
        }
        setTimeout(async () => {
            base_menu = await bot.sendMessage(msg.chat.id, `–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é`, {
                reply_markup: {
                    keyboard: [
                        ['üë∂ –¶–µ–Ω–∞ –∑–∞ —É—Å–ª—É–≥–∏ –¥–µ—Ç—Å–∫–æ–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏','ü§µ –¶–µ–Ω—ã –∑–∞ —É—Å–ª—É–≥–∏ –≤–∑—Ä–æ—Å–ª–æ–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏']
                    ],
                    resize_keyboard : true
                }
            })
        },1000);
    });

    bot.onText(/\/my_records/, async msg => {
        if (base_menu) {
            await bot.deleteMessage(base_menu.chat.id, base_menu.message_id);
            base_menu = null;
        }
        let msgWait = await bot.sendMessage(msg.chat.id, `–ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...`);
        let patient_id = await get_patient_id(msg.from.id);
        let time_mas = getCurrentWeekDates();
        await bot.deleteMessage(msgWait.chat.id, msgWait.message_id);
        for (let len_mas=0; len_mas < time_mas.length; len_mas++){
            let msg_day = await get_zapis_week(time_mas[len_mas],patient_id);
            if (msg_day){
                await bot.sendMessage(msg.chat.id, msg_day, {
                    parse_mode : 'HTML'
                });
            }
        }
    })

    bot.onText('üë∂ –¶–µ–Ω–∞ –∑–∞ —É—Å–ª—É–≥–∏ –¥–µ—Ç—Å–∫–æ–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏', async msg => {
        if (base_menu) {
            await bot.deleteMessage(base_menu.chat.id, base_menu.message_id);
            base_menu = null;
        }
        await bot.sendMessage(msg.chat.id, "<b><i>–î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è</i></b>\n\n" +
            "<b><i>–ê–Ω–µ—Å—Ç–µ–∑–∏—è</i></b>\n\n" +
            "–ê–Ω–µ—Å—Ç–µ–∑–∏—è (–∏–Ω—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è) - 350 ‚ÇΩ\n" +
            "–ê–Ω–µ—Å—Ç–µ–∑–∏—è (–∞–ø–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω–∞—è) - 200 ‚ÇΩ\n" +
            "–ê–Ω–µ—Å—Ç–µ–∑–∏—è (–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤–∞—è) - 450 ‚ÇΩ\n\n" +
            "<b><i>–ì–∏–≥–∏–µ–Ω–∞ –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞</i></b>\n\n" +
            "–ì–∏–≥–∏–µ–Ω–∞ (–¥–æ 14 –ª–µ—Ç) - 2000 ‚ÇΩ\n" +
            "–ì–µ—Ä–º–µ—Ç–∏–∑–∞—Ü–∏—è 1 –∑—É–±–∞ - 650 ‚ÇΩ\n" +
            "–§—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ 1 –∑—É–±–∞ - 150 ‚ÇΩ\n\n" +
            "<b><i>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏</i></b>\n\n" +
            "–ê–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–∏—ë–º - 1000 ‚ÇΩ\n\n"
            , {
            parse_mode : 'HTML'
        }) 
        await bot.sendMessage(msg.chat.id, "<b><i>–õ–µ—á–µ–Ω–∏–µ –∑—É–±–æ–≤</i></b>\n\n" +
            "–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ - 3000 ‚ÇΩ\n" +
            "–õ–µ—á–µ–Ω–∏–µ –ø—É–ª—å–ø–∏—Ç–∞ - 4500 ‚ÇΩ\n\n" +
            "<b><i>–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–æ–≤</i></b>\n\n" +
            "–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–ª–æ—á–Ω—ã—Ö –∑—É–±–æ–≤ - 1200 ‚ÇΩ\n\n"+
            "<b><i>–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã</i></b>\n\n" +
            "–£–∑–¥–µ—á–∫–∞ —Å–∫–∞–ª—å–ø–µ–ª—å - 3500 ‚ÇΩ\n"
            ,{
                parse_mode: 'HTML'    
        });
    });

    bot.onText('ü§µ –¶–µ–Ω—ã –∑–∞ —É—Å–ª—É–≥–∏ –≤–∑—Ä–æ—Å–ª–æ–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏', async msg => {
        if (base_menu) {
            await bot.deleteMessage(base_menu.chat.id, base_menu.message_id);
            base_menu = null;
        }
        await bot.sendMessage(msg.chat.id, "<b><i>–í–∑—Ä–æ—Å–ª–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è</i></b>\n\n" +
            "<b><i>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</i></b>\n\n" +
            "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è - 900 ‚ÇΩ\n" +
            "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - 8000 ‚ÇΩ\n\n" +
            "<b><i>–õ–µ—á–µ–Ω–∏–µ –∑—É–±–æ–≤</i></b>\n\n" +
            "–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ - 4500 ‚ÇΩ\n" +
            "–õ–µ—á–µ–Ω–∏–µ –ø—É–ª—å–ø–∏—Ç–∞ - 6500-12000 ‚ÇΩ\n" +
            "–õ–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–¥–æ–Ω—Ç–∏—Ç–∞ - 7000-14000 ‚ÇΩ\n" +
            "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–µ–∫–ª–æ–≤–æ–ª–æ–∫–æ–Ω–Ω–æ–≥–æ —à—Ç–∏—Ñ—Ç–∞ - 4500 ‚ÇΩ\n" +
            "–í–∫–ª–∞–¥–∫–∞ - 4500 ‚ÇΩ\n\n" +
            "<b><i>–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–æ–≤</i></b>\n\n" +
            "–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞ –ø—Ä–æ—Å—Ç–æ–µ - 2000-3500 ‚ÇΩ\n" +
            "–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞ –º—É–¥—Ä–æ—Å—Ç–∏ (–ø—Ä–æ—Å—Ç–æ–µ) - 3000 ‚ÇΩ\n" +
            "–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞ –º—É–¥—Ä–æ—Å—Ç–∏ (—Å–ª–æ–∂–Ω–æ–µ) - 8000 ‚ÇΩ\n" +
            "–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º - 4000-8000 ‚ÇΩ\n\n",{
                parse_mode : 'HTML'
            });

        await bot.sendMessage(msg.chat.id, "<b><i>–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ</i></b>\n\n"+
            "–ö–æ—Ä–æ–Ω–∫–∞ –∏–∑ –¥–∏–æ–∫—Å–∏–¥–∞ —Ü–∏—Ä–∫–æ–Ω–∏—è —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Å–≤–æ–π –∑—É–± - 17000 ‚ÇΩ\n" +
            "–ö–æ—Ä–æ–Ω–∫–∞ –∏–∑ –º–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏–∫–∏ —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Å–≤–æ–π –∑—É–± - 12000 ‚ÇΩ\n" +
            "–ö–æ—Ä–æ–Ω–∫–∞ –∏–∑ –¥–∏–æ–∫—Å–∏–¥–∞ —Ü–∏—Ä–∫–æ–Ω–∏—è —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –∏–º–ø–ª–∞–Ω—Ç –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ - 45000 ‚ÇΩ\n" +
            "–ü—Ä–æ—Ç–µ–∑ —Å –∞–∫—Ä–∏–ª–æ–≤—ã–º–∏ –∑—É–±–∞–º–∏ —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Ç–∏—Ç–∞–Ω–æ–≤—Å–∫—É—é –±–∞–ª–∫—É (—Å—ä–µ–º–Ω—ã–π) - 120000 ‚ÇΩ\n" +
            "–ü—Ä–æ—Ç–µ–∑ —Å –∞–∫—Ä–∏–ª–æ–≤—ã–º–∏ –∑—É–±–∞–º–∏ —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –∏–º–ø–ª–∞–Ω—Ç—ã - 150000 ‚ÇΩ\n" +
            "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–ø–ª–∞–Ω—Ç–∞ –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ - 27000 ‚ÇΩ\n" +
            "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–ø–ª–∞–Ω—Ç–∞ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ - 45000 ‚ÇΩ\n" +
            "–ö–æ—Ä–æ–Ω–∫–∞ –∏–∑ –¥–∏–æ–∫—Å–∏–¥–∞ —Ü–∏—Ä–∫–æ–Ω–∏—è —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –∏–º–ø–ª–∞–Ω—Ç –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ - 27000 ‚ÇΩ\n"+
            "–ö–æ—Ä–æ–Ω–∫–∞ –∏–∑ –º–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–º–∞–º–∏–∫–∏ —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –∏–º–ø–ª–∞–Ω—Ç –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ - 20000 ‚ÇΩ\n"+
            "–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ—Ä–æ–Ω–∫–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è - 5500 ‚ÇΩ\n" +
            "–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ—Ä–æ–Ω–∫–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä—è–º—ã–º —Å–ø–æ—Å–æ–±–æ–º - 3000 ‚ÇΩ\n" +
            "–°–Ω—è—Ç–∏–µ –∫–æ—Ä–æ–Ω–∫–∏ - 500 ‚ÇΩ\n\n", {
                parse_mode : 'HTML'
            });
    });

    bot.onText('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', async msg => {
        try{
            if (base_menu) {
                await bot.deleteMessage(base_menu.chat.id, base_menu.message_id);
                base_menu = null;
            }
            doctor_menu = await bot.sendPhoto(msg.chat.id, './assets/menu_img_2.jpg', {
                caption: '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞</b>',
                parse_mode: 'HTML',
                reply_markup: {
                    resize_keyboard : true,
                    inline_keyboard: [
                        [{text: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ç–µ—Ä–∞–ø–µ–≤—Ç', callback_data: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ç–µ—Ä–∞–ø–µ–≤—Ç'}],
                        [{text: 'C—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ö–∏—Ä—É—Ä–≥', callback_data: 'C—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ö–∏—Ä—É—Ä–≥'}],
                        [{text: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–æ—Ä—Ç–æ–ø–µ–¥', callback_data: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–æ—Ä—Ç–æ–ø–µ–¥'}],
                        [{text: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–≥–∏–≥–∏–µ–Ω–∏—Å—Ç', callback_data: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–≥–∏–≥–∏–µ–Ω–∏—Å—Ç'}],
                        [{text: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–ø–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥', callback_data: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–ø–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥'}],
                        [{text: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–∏–º–ø–ª–∞–Ω—Ç–æ–ª–æ–≥', callback_data: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–∏–º–ø–ª–∞–Ω—Ç–æ–ª–æ–≥'}],
                        [{text: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–æ—Ä—Ç–æ–¥–æ–Ω—Ç', callback_data: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–æ—Ä—Ç–æ–¥–æ–Ω—Ç'}],
                        [{text: '–î–µ—Ç—Å–∫–∏–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥', callback_data: '–î–µ—Ç—Å–∫–∏–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥'}],
                        [{text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚ùå', callback_data: 'closeMenu'}]
                    ],
                }
            });
        } catch (error){
            console.log(error);
        }
    })

    bot.onText('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º –∫ –≤—Ä–∞—á—É', async msg => {
        try{
            if (base_menu) {
                await bot.deleteMessage(base_menu.chat.id, base_menu.message_id);
                base_menu = null;
            }
            doctor_menu = await bot.sendPhoto(msg.chat.id, './assets/menu_img_1.jpg', {
                caption: '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞</b>',
                parse_mode: 'HTML',
                reply_markup: {
                    resize_keyboard : true,
                    inline_keyboard: [
                        [{text: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ç–µ—Ä–∞–ø–µ–≤—Ç', callback_data: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ç–µ—Ä–∞–ø–µ–≤—Ç'}],
                        [{text: 'C—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ö–∏—Ä—É—Ä–≥', callback_data: 'C—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ö–∏—Ä—É—Ä–≥'}],
                        [{text: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–æ—Ä—Ç–æ–ø–µ–¥', callback_data: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–æ—Ä—Ç–æ–ø–µ–¥'}],
                        [{text: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–≥–∏–≥–∏–µ–Ω–∏—Å—Ç', callback_data: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–≥–∏–≥–∏–µ–Ω–∏—Å—Ç'}],
                        [{text: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–ø–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥', callback_data: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–ø–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥'}],
                        [{text: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–∏–º–ø–ª–∞–Ω—Ç–æ–ª–æ–≥', callback_data: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–∏–º–ø–ª–∞–Ω—Ç–æ–ª–æ–≥'}],
                        [{text: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–æ—Ä—Ç–æ–¥–æ–Ω—Ç', callback_data: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–æ—Ä—Ç–æ–¥–æ–Ω—Ç'}],
                        [{text: '–î–µ—Ç—Å–∫–∏–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥', callback_data: '–î–µ—Ç—Å–∫–∏–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥'}],
                        [{text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚ùå', callback_data: 'closeMenu'}]
                    ],
                }
            });
        } catch(error){
            console.log(error);
        }
    });

    bot.on('callback_query', async (ctx,match) => {
        try {
            const data = ctx.data;
            if (base_menu) {
                await bot.deleteMessage(base_menu.chat.id, base_menu.message_id);
                base_menu = null;
            }
            if (doctor_menu) {
                await bot.deleteMessage(doctor_menu.chat.id, doctor_menu.message_id);
                doctor_menu = null;
            }
            if (data.includes("month_next")) {
                if (calendar_select) {
                    await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id);
                    calendar_select = null;
                }
                
                const newDate = new Date();
                newDate.setMonth(newDate.getMonth() + 1);
                calendar.setDate(newDate);

                let buttons = calendar.generateCalendar();
                
                calendar_select = await bot.sendMessage(ctx.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", {
                    reply_markup: buttons,
                });
            } else if (data == "closeMenu"){
                if (doctor_menu) {
                    await bot.deleteMessage(ctx.message.chat.id, doctor_menu.message_id);
                    doctor_menu = null;
                }
            } else if (data.includes(".day_calendar")) {
                const date = data.replace(/\..*$/, "");
                if (calendar_select) {
                    await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id);
                    calendar_select = null;
                }
                if (doctor_menu) {
                    await bot.deleteMessage(ctx.message.chat.id, doctor_menu.message_id);
                    doctor_menu = null;
                }

                time_list = await get_schedule_time(selected_doctor,date);

                if (time_list && time_list.length > 0){
                    let mas_time_btn = time_list.map(times => {
                        return [{
                            text: `    ‚åõ ${times.start} - ${times.end} ‚åõ    `,
                            callback_data: `time-added_${times.start}_${times.end}_${selected_doctor}_${date}`
                        }];
                    })

                    time_selected = await bot.sendMessage(ctx.message.chat.id, `–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è`,{
                        reply_markup: {
                            resize_keyboard : true,
                            inline_keyboard: mas_time_btn,
                        }
                    });
                }

            } else if (data.includes("doctor_")) {
                if (selected_doctor) {
                    await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id);
                    selected_doctor = null;
                }
                selected_doctor = data.replace("doctor_", "");
                if (calendar_select) {
                    await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id);
                    calendar_select = null;
                }

                calendar_select = await bot.sendMessage(ctx.message.chat.id, `–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:`, {
                    reply_markup: buttons,
                });

            } else if (data.includes("time-added_")) {
                if (time_selected) {
                    await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id);
                    time_selected = null;
                }
                let result_mas = String(data).split('_').slice(1);
                let patient_id = await get_patient_id(ctx.from.id);
                let make_zapis_value = await make_zapis(
                    result_mas[0],
                    result_mas[1],
                    result_mas[2],
                    patient_id,
                    result_mas[3]
                );
                
                await bot.sendMessage(ctx.message.chat.id, `–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Ä–µ–º—è ${result_mas[0]}-${result_mas[1]}`);
            } else if (data.includes("–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-") || data.includes("–î–µ—Ç—Å–∫–∏–π")){
                doctor_type = String(ctx.data);
                console.log(doctor_type);
                doctors_list = await get_doctor_type_list(doctor_type);

                if (doctors_list && doctors_list.length > 0) {
                    let mas_doctor_btn = doctors_list.map(doctor => {
                        let emoji = doctor.gender_of_the_person === "M" ? "üë®‚Äç‚öïÔ∏è" : "üë©‚Äç‚öïÔ∏è";
                        return [{
                            text: `${emoji} ${doctor.FIO}`,
                            callback_data: `doctor_${doctor.id}`
                        }];
                    });

                    if (doctor_menu) {
                        await bot.deleteMessage(ctx.message.chat.id, doctor_menu.message_id);
                        doctor_menu = null;
                    }

                    selected_doctor = await bot.sendMessage(ctx.message.chat.id, `${doctor_type}:`,{
                        reply_markup: {
                            resize_keyboard : true,
                            inline_keyboard: mas_doctor_btn,
                        }
                    });
                }

            }
        }
        catch(error) {
            console.log(error);
        }
    });
}

export default ways;